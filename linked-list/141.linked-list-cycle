/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
// extra space
class Solution {
public:
    bool hasCycle(ListNode *head) {
        
        unordered_map<ListNode*, bool> map;
        while(head)
        {
            if(map.count(head))
                return true;
            
            map[head] = true;
            head = head->next;
        }
        return false;
    }
};

// floyd's cycle finding or tortoise and hare algorithm (constant space)
class Solution {
public:
    bool hasCycle(ListNode *head) {
        
        ListNode* slow = head, *fast = head;
        while(fast && fast->next)
        {   
            slow = slow->next;
            fast = fast->next->next;
            
            if(slow == fast)
                return true;
        }
        return false;
    }
};
