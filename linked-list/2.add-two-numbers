/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
// extra space
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        ListNode dummy(0);
        ListNode* curr = &dummy;
        int carry = 0;

        while(l1 || l2 || carry)
        {
            int sum = carry;
            if(l1)
            {
                sum += l1->val;
                l1 = l1->next;
            }
            if(l2)
            {
                sum += l2->val;
                l2 = l2->next;
            }

            carry = sum / 10;
            curr->next = new ListNode(sum % 10);
            curr = curr->next;
        }

        return dummy.next;
    }
};

// in-place constant space
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        ListNode* res = l1, *link;

        int carry = 0, sum;
        while(l1)
        {
            sum = l1->val + carry;
            if(l2) sum += l2->val;
            
            l1->val = sum % 10;
            carry = sum / 10;

            if(!l1->next) link = l1;
            
            l1 = l1->next;
            if(l2) l2 = l2->next;
        }
        
        if(l2) link->next = l2;
        
        while(l2)
        {   
            sum = l2->val + carry;
            
            l2->val = sum % 10;
            carry = sum / 10;

            if(!l2->next) link = l2;
            l2 = l2->next;
        }

        if(carry) link->next = new ListNode(carry);

        return res;
    }
};
