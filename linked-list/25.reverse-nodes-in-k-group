/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    pair<ListNode*, ListNode*> reverseList(ListNode* head, int k)
    {
        ListNode* curr = head, *prev = NULL;
        while(k--)
        {
            ListNode* Next = curr->next;
            curr->next = prev;

            prev = curr;
            curr = Next;         
        }
        return {prev, curr};
    }
  
    ListNode* reverseKGroup(ListNode* head, int k) {
        
        int len = 0;
        ListNode* curr = head;
        while(curr)
        {
            curr = curr->next;
            len += 1;
        }
        curr = head;
        
        ListNode dummy;
        ListNode* prevTail = &dummy;

        int it = len / k;
        while(it--)
        {
            pair<ListNode*, ListNode*> p = reverseList(curr, k);
            
            prevTail->next = p.first;
            curr->next = p.second;
            prevTail = curr;
            curr = p.second;
        }
      
        return dummy.next;
    }
};


// without finding length of the list at once rather checking the reversibility of the group on-the-go
class Solution {
public:
    ListNode* FindKthNode(ListNode* curr, int k)
    {
        while(curr && k > 0)
        {
            curr = curr->next;
            k -= 1;
        }
        return curr;
    }

    ListNode* reverseKGroup(ListNode* head, int k) {
        
        ListNode dummy(0, head);
        ListNode* prevTail = &dummy;

        while(1)
        {
            ListNode* kth = FindKthNode(prevTail, k);
            if(!kth)
                break;

            ListNode* prev = kth->next, *nextgroupnode = kth->next, *curr = prevTail->next;
            while(curr != nextgroupnode)
            {
                ListNode* temp = curr->next;
                curr->next = prev;
                prev = curr;
                curr = temp;
            }

            ListNode* tmp = prevTail->next;
            prevTail->next = kth;
            prevTail = tmp;
        }

        return dummy.next;
    }
};
