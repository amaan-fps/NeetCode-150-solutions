/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    pair<ListNode*, ListNode*> reverseList(ListNode* head, int k)
    {
        ListNode* curr = head, *prev = NULL;
        while(k--)
        {
            ListNode* Next = curr->next;
            curr->next = prev;

            prev = curr;
            curr = Next;         
        }
        return {prev, curr};
    }
  
    ListNode* reverseKGroup(ListNode* head, int k) {
        
        int len = 0;
        ListNode* curr = head;
        while(curr)
        {
            curr = curr->next;
            len += 1;
        }
        curr = head;
        
        ListNode dummy;
        ListNode* prevTail = &dummy;

        int it = len / k;
        while(it--)
        {
            pair<ListNode*, ListNode*> p = reverseList(curr, k);
            
            prevTail->next = p.first;
            curr->next = p.second;
            prevTail = curr;
            curr = p.second;
        }
      
        return dummy.next;
    }
};
