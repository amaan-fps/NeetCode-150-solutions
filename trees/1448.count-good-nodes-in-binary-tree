/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// clean
class Solution {
public:
    int dfs(TreeNode* root, int max)
    {
        if(!root)
            return 0;

        int goodnode = 0;
        if(root->val >= max)
        {
            goodnode += 1;
            max = root->val;
        }
        
        goodnode += dfs(root->left, max);
        goodnode += dfs(root->right, max);
        
        return goodnode;
    }

    int goodNodes(TreeNode* root) {
        return dfs(root, root->val);
    }
};

// no need to use stack because every recursive call retains its value of max variable
class Solution {
public:
    int dfs(TreeNode* root, int max)
    {
        if(!root)
            return 0;

        bool goodnode = false;
        if(root->val >= max)
        {
            goodnode = true;
            max = root->val;
        }
        
        int left = dfs(root->left, max);
        int right = dfs(root->right, max);
        
        return goodnode ? 1 + left + right : left + right;
    }

    int goodNodes(TreeNode* root) {
        return dfs(root, root->val);
    }
};

// dumb stack solution
class Solution {
public:
    int dfs(TreeNode* root, stack<int>& max)
    {
        if(!root)
            return 0;

        if(max.empty() || max.top() <= root->val)
            max.push(root->val);
        
        int left = dfs(root->left, max);
        int right = dfs(root->right, max);
        
        if(root->val < max.top())
            return left+right;
        else if(root->val == max.top())
            max.pop();
            
        return 1+left+right;
    }

    int goodNodes(TreeNode* root) {
        stack<int> s;
        return dfs(root, s);
    }
};
